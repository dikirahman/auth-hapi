{
	"info": {
		"_postman_id": "8772fb63-a469-46a9-91d8-c0d065014a06",
		"name": "Auth API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Adding User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should be 201', () => {",
									"   pm.response.to.have.status(201);",
									"}); ",
									" ",
									"pm.test('response Content-Type should application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
									"});",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson).to.ownProperty('data');",
									"",
									"",
									"    pm.expect(responseJson.status).to.equals('success');",
									"    pm.expect(responseJson.message).to.be.a('string');",
									"    pm.expect(responseJson.message).to.not.equals('');",
									"    pm.expect(responseJson.data).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body data should have userId property and not equal to empty', () => {",
									"    const responseJson = pm.response.json();",
									"    const { data } = responseJson;",
									" ",
									"    pm.expect(data).to.ownProperty('userId');",
									"    pm.expect(data.userId).to.not.equals('');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\"    : \"{{newName}}\",\n    \"username\": \"{{newUsername}}\",\n    \"email\"   : \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding User with Bad Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"   pm.response.to.have.status(400);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.not.equals(' ');",
									"    pm.expect(responseJson.message).to.not.equals(null);",
									"});",
									" ",
									"const repeatRequestUntilDatasetEmpty = () => {",
									"    const badUserPayloads = pm.environment.get('badUserPayloads');",
									" ",
									"    if(badUserPayloads && badUserPayloads.length > 0) {",
									"        postman.setNextRequest('Adding User with Bad User Payload');",
									"    }",
									"}",
									" ",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badUserPayloads = pm.environment.get('badUserPayloads');",
									" ",
									"if (!badUserPayloads || badUserPayloads.length === 0) {",
									"    badUserPayloads = [",
									"        { username: 'user1', email: 'user1@gmail.com', password: 'secret' },",
									"        { name:'user', email: 'user1@gmail.com', password: 'secret' },",
									"        { name:'user', username: 'user1', password: 'secret' },",
									"        { name:'user', username: 'user1', email: 'user1@gmail.com' },",
									"        { name:true, username: 'user1', email: 'user1@gmail.com', password: 'secret' },",
									"        { name:'user', username: true, email: 'user1@gmail.com', password: 'secret' },",
									"        { name:'user', username: 'user1', email: true, password: 'secret' },",
									"        { name:'user', username: 'user1', email: 'user1', password: 'secret' },",
									"        { name:'user', username: 'user1', email: 'user1@gmail.com', password: true },",
									"    ]",
									"}",
									" ",
									"const currentBadUserPayload = badUserPayloads.shift();",
									"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayload));",
									"pm.environment.set('badUserPayloads', badUserPayloads);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadUserPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding User with Exist Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"   pm.response.to.have.status(400);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Failed to add user. username already used.');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* referensi: https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts */",
									" ",
									"const postRequest = {",
									"    url: 'http://localhost:5000/users',",
									"    method: 'POST',",
									"    header: {",
									"    'Content-Type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            name: pm.environment.get('newName'),",
									"            username: 'testing',",
									"            email: pm.environment.get('newEmail'),",
									"            password: pm.environment.get('newPassword')",
									"        }),",
									"    },",
									"};",
									" ",
									"pm.sendRequest(postRequest, (error, response) => {",
									"    console.log(error ? error : response.json());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\"    : \"testing\",\n    \"username\": \"{{newUsername}}\",\n    \"email\"   : \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding User with Exist Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"   pm.response.to.have.status(400);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Failed to add user. username already used.');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* referensi: https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts */",
									" ",
									"const postRequest = {",
									"    url: 'http://localhost:5000/users',",
									"    method: 'POST',",
									"    header: {",
									"    'Content-Type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            name: pm.environment.get('newName'),",
									"            username: 'new',",
									"            email: 'testing@gmail.com',",
									"            password: pm.environment.get('newPassword')",
									"        }),",
									"    },",
									"};",
									" ",
									"pm.sendRequest(postRequest, (error, response) => {",
									"    console.log(error ? error : response.json());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\"    : \"{{newName}}\",\n    \"username\": \"{{newUsername}}\",\n    \"email\"   : \"testing@gmail.com\",\n    \"password\": \"{{newPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentications",
			"item": [
				{
					"name": "Post Authentication with Invalid Creadentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const postRequest = {",
									"    url: 'http://localhost:5000/users',",
									"    method: 'POST',",
									"    header: {",
									"    'Content-Type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            username: 'testing',",
									"            password: pm.environment.get('newPassword'),",
									"            fullname: pm.environment.get('newFullname')",
									"        }),",
									"    },",
									"};",
									" ",
									"pm.sendRequest(postRequest, (error, response) => {",
									"    console.log(error ? error : response.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 401 value', () => {",
									"   pm.response.to.have.status(401);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('The credentials you provided are wrong.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testing\",\n    \"password\": \"somebadpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authentications",
							"host": [
								"{{url}}"
							],
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Authentication with Valid Credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* referensi: https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts */",
									" ",
									"const postRequest = {",
									"    url: 'http://localhost:5000/users',",
									"    method: 'POST',",
									"    header: {",
									"    'Content-Type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            role: pm.environment.get('newRole'),",
									"            name: pm.environment.get('newName'),",
									"            username: 'testing',",
									"            email: \"testing@gmail.com\",",
									"            password: pm.environment.get('newPassword')",
									"        }),",
									"    },",
									"};",
									" ",
									"pm.sendRequest(postRequest, (error, response) => {",
									"    console.log(error ? error : response.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {",
									"   pm.response.to.have.status(201);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('success');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Authentication added successfully.');",
									"    pm.expect(responseJson).to.ownProperty('data');",
									"    pm.expect(responseJson.data).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body data should have property accessToken and refreshToken with correct value', () => {",
									"    const responseJson = pm.response.json();",
									"    const { data } = responseJson;",
									" ",
									"    pm.expect(data).to.have.ownProperty('accessToken');",
									"    pm.expect(data.accessToken).to.not.equals('');",
									"    pm.expect(data.accessToken).to.not.equals(null);",
									"    pm.expect(data).to.have.ownProperty('refreshToken');",
									"    pm.expect(data.refreshToken).to.not.equals('');",
									"    pm.expect(data.refreshToken).to.not.equals(null);",
									" ",
									" ",
									"    // menyimpan accessToken dan refreshToken di environment variable",
									"    pm.environment.set('accessToken', data.accessToken);",
									"    pm.environment.set('refreshToken', data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testing\",\n    \"password\": \"{{newPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authentications",
							"host": [
								"{{url}}"
							],
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Authentications with Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"   pm.response.to.have.status(400);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Invalid refresh token.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"xxxxx\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authentications",
							"host": [
								"{{url}}"
							],
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Authentication with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {",
									"   pm.response.to.have.status(200);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('success');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Access Token successfully updated.');",
									"    pm.expect(responseJson).to.ownProperty('data');",
									"    pm.expect(responseJson.data).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body data should have property accessToken and refreshToken with correct value', () => {",
									"    const responseJson = pm.response.json();",
									"    const { data } = responseJson;",
									" ",
									"    pm.expect(data).to.have.ownProperty('accessToken');",
									"    pm.expect(data.accessToken).to.not.equals('');",
									"    pm.expect(data.accessToken).to.not.equals(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authentications",
							"host": [
								"{{url}}"
							],
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authentication with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {",
									"   pm.response.to.have.status(200);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('success');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Refresh token deleted successfully.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authentications",
							"host": [
								"{{url}}"
							],
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authentication with Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"   pm.response.to.have.status(400);",
									"}); ",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Invalid refresh token.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"xxxxx\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authentications",
							"host": [
								"{{url}}"
							],
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}